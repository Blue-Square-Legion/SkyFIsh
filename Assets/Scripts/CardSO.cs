using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(fileName = "SO", menuName = "New Card")]
public class CardSO : ScriptableObject
{
    /// <summary>
    /// Still experimenting with how cards are created and added to the deck.
    /// Current idea is that the CardSO will hold all the images of a spefic theme.
    /// Then, once the rank and suite of the card are set, it will search for the rank and suite by name, Suite_Rank is the current naming format
    /// Card.cs is the script that will be attached to the actual card model the player is using,
    /// and will be the prefabed object that gets interacted with in other scripts and generated by the deck.
    /// 
    /// CreateDeck will instantiate all the cards.
    /// Im thinking there will be a GameController Object that will persist between scenes.
    /// Once other card options are created, each option from the menu will have the associated CardSO theme and itll be slotted into the active theme controlled by the game manager
    /// Will probably also need to look into .json stuff so that player's choice is remembered between game sessions
    /// </summary>
    public enum Rank 
    {
        Ace = 1,
        Two,
        Three,
        Four,
        Five,
        Six,
        Seven,
        Eight,
        Nine,
        Ten,
        Jack,
        Queen,
        King
    }
    public enum Suite 
    {
        Spade,
        Club,
        Heart,
        Diamond
    }

    [SerializeField] private Rank _myRank;
    [SerializeField] private Suite _mySuite;
    [SerializeField] private Sprite _cardFace;
    [SerializeField] private Sprite _cardBack;
    [SerializeField] List<Sprite> cardFaces = new ();
    public Rank GetRank() 
    {
        return _myRank;
    }
    public void SetRank(Rank chosenRank)
    {
        _myRank = chosenRank;
    }

    public void SetRank(int rankValue) 
    {
        if (rankValue < 1 || rankValue > 13)
        {
            Debug.LogError($"{rankValue} is not an actual rank");
        }
        else
            _myRank = (Rank)rankValue;
    }

    public Suite GetSuite() 
    {
        return _mySuite;
    }

    public void SetSuite(Suite chosenSuite) 
    {
        _mySuite = chosenSuite;
        SelectFace();
    }

    private void SelectFace() 
    {
        string faceName = $"{_mySuite}_{_myRank}";
        foreach (Sprite sprite in cardFaces) {
            if (sprite.name.Equals(faceName))
            {
                _cardFace = sprite;
                break;
            }
        }
        if (_cardFace.Equals(null)) 
        {
            Debug.LogWarning($"No image found for {_mySuite}_{_myRank}. It is either not in the list or not named correctly");
        }
    }

    public Sprite ApplyCardFace() 
    {
        return _cardFace;
    }

    public Sprite ApplyCardBack()
    {
        return _cardBack;
    }
}
